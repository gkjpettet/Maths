<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2021r1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="1009266687">
 <ObjName>Perlin</ObjName>
 <ObjContainerID>1569351679</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Permutation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1482491903</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Permutation(index As Integer) As Integer</SourceLine>
   <SourceLine>Static perm() As Integer = Array(151,160,137,91,90,15, _</SourceLine>
   <SourceLine>131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23, _</SourceLine>
   <SourceLine>190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33, _</SourceLine>
   <SourceLine>88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166, _</SourceLine>
   <SourceLine>77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244, _</SourceLine>
   <SourceLine>102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196, _</SourceLine>
   <SourceLine>135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123, _</SourceLine>
   <SourceLine>5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42, _</SourceLine>
   <SourceLine>223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9, _</SourceLine>
   <SourceLine>129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228, _</SourceLine>
   <SourceLine>251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107, _</SourceLine>
   <SourceLine>49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254, _</SourceLine>
   <SourceLine>138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180, 151)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return perm(index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>index As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>FBM</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 1D fractional Brownian motion value in the (approx) range -0.75 to 0.75.</CodeDescription>
  <PartID>22061055</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function FBM(x As Double, octave As Integer) As Double</SourceLine>
   <SourceLine>/// 1D Fractional Brownian motion.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>/// - Notes:</SourceLine>
   <SourceLine>/// Returns a value in the approximate range -0.75 to 0.75.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var f As Double = 0</SourceLine>
   <SourceLine>Var w As Double = 0.5</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var iMax As Integer = octave - 1</SourceLine>
   <SourceLine>For i As Integer = 0 To iMax</SourceLine>
   <SourceLine>f = f + (w * Noise(x))</SourceLine>
   <SourceLine>x = x * 2.0</SourceLine>
   <SourceLine>w = w * 0.5</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return f</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>x As Double, octave As Integer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>FBM2D</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 2D fractional Brownian motion value in the (approx) range -0.75 to 0.75.</CodeDescription>
  <PartID>1957533695</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function FBM2D(x As Double, y As Double, octave As Integer) As Double</SourceLine>
   <SourceLine>/// 2D Fractional Brownian motion.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>/// - Notes:</SourceLine>
   <SourceLine>/// Returns a value in the approximate range -0.75 to 0.75.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return FBMVector2(New Vector2(x, y), octave)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>x As Double, y As Double, octave As Integer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>FBM3D</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 3D fractional Brownian motion value in the (approx) range -0.75 to 0.75.</CodeDescription>
  <PartID>361060351</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function FBM3D(x As Double, y As Double, z As Double, octave As Integer) As Double</SourceLine>
   <SourceLine>/// 3D Fractional Brownian motion.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>/// - Notes:</SourceLine>
   <SourceLine>/// Returns a value in the approximate range -0.75 to 0.75.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return FBMVector3(New Vector3(x, y, z), octave)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>x As Double, y As Double, z As Double, octave As Integer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Fade</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>871397375</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Fade(t As Double) As Double</SourceLine>
   <SourceLine>Return t * t * t * (t * (t * 6 - 15) + 10)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>t As Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Lerp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1416517631</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Lerp(t As Double, a As Double, b As Double) As Double</SourceLine>
   <SourceLine>Return a + t * (b - a)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>t As Double, a As Double, b As Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Grad</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1236604927</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Grad(hash As Integer, x As Double) As Double</SourceLine>
   <SourceLine>Return If((hash And 1) = 0, x, -x)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>hash As Integer, x As Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Grad</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2022895615</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Grad(hash As Integer, x As Double, y As Double) As Double</SourceLine>
   <SourceLine>Return If((hash And 1) = 0, x, -x) + If((hash And 2) = 0, y, -y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>hash As Integer, x As Double, y As Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Grad</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>292368383</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Grad(hash As Integer, x As Double, y As Double, z As Double) As Double</SourceLine>
   <SourceLine>Var h As Integer = hash And 15</SourceLine>
   <SourceLine>Var u As Integer = If(h &lt; 8, x, y)</SourceLine>
   <SourceLine>Var v As Integer = If(h &lt; 4, y, If(h = 12 Or h = 14, x, z))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return If((h And 1) = 0, u, -u) + If((h And 2) = 0, v, -v)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>hash As Integer, x As Double, y As Double, z As Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Noise</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 1D Perlin noise value in the range -1.0 to 1.0.</CodeDescription>
  <PartID>837634047</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Noise(x As Double) As Double</SourceLine>
   <SourceLine>Var X_ As Integer = CType(Floor(x), Integer) And &amp;hff</SourceLine>
   <SourceLine>x = x - Floor(x)</SourceLine>
   <SourceLine>Var u As Double = Fade(x)</SourceLine>
   <SourceLine>Return Lerp(u, Grad(Permutation(X_), x), Grad(Permutation(X_ + 1), x - 1)) * 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>x As Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Noise2D</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 2D Perlin noise value in the range -1.0 to 1.0.</CodeDescription>
  <PartID>1156321279</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Noise2D(x as Double, y as Double) As Double</SourceLine>
   <SourceLine>Var X_ As Integer = CType(Floor(x), Integer) And &amp;hff</SourceLine>
   <SourceLine>Var Y_ As Integer = CType(Floor(y), Integer) And &amp;hff</SourceLine>
   <SourceLine>x = x - Floor(x)</SourceLine>
   <SourceLine>y = y - Floor(y)</SourceLine>
   <SourceLine>Var u As Double = Fade(x)</SourceLine>
   <SourceLine>Var v As Double = Fade(y)</SourceLine>
   <SourceLine>Var A As Integer = (Permutation(X_) + Y_) And &amp;hff</SourceLine>
   <SourceLine>Var B As Integer = (Permutation(X_ + 1) + Y_) And &amp;hff</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Lerp(v, Lerp(u, Grad(Permutation(A), x, y), _</SourceLine>
   <SourceLine>Grad(Permutation(B), x - 1, y)), _</SourceLine>
   <SourceLine>Lerp(u, Grad(Permutation(A + 1), x, y - 1), _</SourceLine>
   <SourceLine>Grad(Permutation(B + 1), x - 1, y - 1)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>x as Double, y as Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Noise3D</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 3D Perlin noise value in the range -1.0 to 1.0.</CodeDescription>
  <PartID>19628031</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function Noise3D(x As Double, y As Double, z As Double) As Double</SourceLine>
   <SourceLine>Var X_ As Integer = CType(Floor(x), Integer) And &amp;hff</SourceLine>
   <SourceLine>Var Y_ As Integer = CType(Floor(y), Integer) And &amp;hff</SourceLine>
   <SourceLine>Var Z_ As Integer = CType(Floor(z), Integer) And &amp;hff</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>x = x - Floor(x)</SourceLine>
   <SourceLine>y = y - Floor(y)</SourceLine>
   <SourceLine>z = z - Floor(z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var u As Double = Fade(x)</SourceLine>
   <SourceLine>Var v As Double = Fade(y)</SourceLine>
   <SourceLine>Var w As Double = Fade(z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var A As Integer = (Permutation(X_) + Y_) And &amp;hff</SourceLine>
   <SourceLine>Var B As Integer = (Permutation(X_ + 1) + Y_) And &amp;hff</SourceLine>
   <SourceLine>Var AA As Integer = (Permutation(A) + Z_) And &amp;hff</SourceLine>
   <SourceLine>Var BA As Integer = (Permutation(B) + Z_) And &amp;hff</SourceLine>
   <SourceLine>Var AB As Integer = (Permutation(A + 1) + Z_) And &amp;hff</SourceLine>
   <SourceLine>Var BB As Integer = (Permutation(B + 1) + Z_) And &amp;hff</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Lerp(w, Lerp(v, Lerp(u, Grad(Permutation(AA), x, y, z), _</SourceLine>
   <SourceLine>Grad(Permutation(BA), x - 1, y, z)), _</SourceLine>
   <SourceLine>Lerp(u, Grad(Permutation(AB), x, y - 1, z), _</SourceLine>
   <SourceLine>Grad(Permutation(BB), x - 1, y - 1, z))), _</SourceLine>
   <SourceLine>Lerp(v, Lerp(u, Grad(Permutation(AA + 1), x, y, z - 1), _</SourceLine>
   <SourceLine>Grad(Permutation(BA + 1), x - 1, y, z - 1)), _</SourceLine>
   <SourceLine>Lerp(u, Grad(Permutation(AB + 1), x, y - 1, z - 1), _</SourceLine>
   <SourceLine>Grad(Permutation(BB + 1), x - 1, y - 1, z - 1))))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>x As Double, y As Double, z As Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>FBMVector3</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 3D fractional Brownian motion value in the (approx) range -0.75 to 0.75.</CodeDescription>
  <PartID>2134697983</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function FBMVector3(coord As Vector3, octave As Integer) As Double</SourceLine>
   <SourceLine>/// 3D Fractional Brownian motion.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>/// - Notes:</SourceLine>
   <SourceLine>/// Returns a value in the approximate range -0.75 to 0.75.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var f As Double = 0.0</SourceLine>
   <SourceLine>Var w As Double = 0.5</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var iMax As Integer = octave - 1</SourceLine>
   <SourceLine>For i As Integer = 0 to iMax</SourceLine>
   <SourceLine>f = f + (w * NoiseVector3(coord))</SourceLine>
   <SourceLine>coord = coord * 2.0</SourceLine>
   <SourceLine>w = w * 0.5</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return f</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>coord As Vector3, octave As Integer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>FBMVector2</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Returns the 2D fractional Brownian motion value in the (approx) range -0.75 to 0.75.</CodeDescription>
  <PartID>808142847</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function FBMVector2(coord As Vector2, octave As Integer) As Double</SourceLine>
   <SourceLine>/// 2D Fractional Brownian motion.</SourceLine>
   <SourceLine>///</SourceLine>
   <SourceLine>/// - Notes:</SourceLine>
   <SourceLine>/// Returns a value in the approximate range -0.75 to 0.75.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var f As Double = 0.0</SourceLine>
   <SourceLine>Var w As Double = 0.5</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var iMax As Integer = octave - 1</SourceLine>
   <SourceLine>For i As Integer = 0 To iMax</SourceLine>
   <SourceLine>f = f + (w * NoiseVector2(coord))</SourceLine>
   <SourceLine>coord = coord * 2.0</SourceLine>
   <SourceLine>w = w * 0.5</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return f</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>coord As Vector2, octave As Integer</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>NoiseVector3</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>75646975</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function NoiseVector3(coord As Vector3) As Double</SourceLine>
   <SourceLine>Return Noise3D(coord.X, coord.Y, coord.Z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>coord As Vector3</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>NoiseVector2</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>195391487</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function NoiseVector2(coord As Vector2) As Double</SourceLine>
   <SourceLine>Return Noise2D(coord.X, coord.Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>coord As Vector2</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>829790207</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>A class for creating Perlin noise and fractional Brownian motuon in </NoteLine>
   <NoteLine>1, 2 or 3 dimensions.</NoteLine>
   <NoteLine>A direct port from the C# version here:</NoteLine>
   <NoteLine>https://github.com/keijiro/PerlinNoise/blob/master/Assets/Perlin.cs</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
